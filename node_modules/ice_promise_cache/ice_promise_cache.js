'use strict';

var Q = require('ice_q');

//обновлять кэш при вызове, но не сразу а паралельно
//пока обновление не выполнено, возвращать кэшированный результат
//если в процессе обновления была ошибка, возвращать кэшированный результат
var create_cached_resource_getter = function(init_fn, miliseconds_expire){
  var update_time_ = new Date();
  var inside_update = true;
  var promise_cache_ = init_fn().then(function(data){
    inside_update = false;
    return data;
  });


  return function(){
    var current_time = new Date();
    if(current_time - update_time_ > miliseconds_expire && !inside_update){
      update_time_ = current_time;
      

      
        //сюда при условии что промайз кэш заресолвен
      inside_update = true;

      init_fn().then(function(data){
        promise_cache_.done(); //больше ненужен
        /*jshint newcap:false */
        promise_cache_ = Q(data);
        inside_update = false;
        return data;
      }).catch(function (error){
        console.error('-----------create_cached_resource--------------');
        console.error(error);
        console.error(error.stack);
      }).done();
    }

    return promise_cache_;
  };
};

module.exports.create_cached_resource_getter = create_cached_resource_getter;