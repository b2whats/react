'use strict';

/*
Как запускать страшные скрипты из ноды
*/

var exec = require('child_process').exec;
var q = require('ice_q');
var _ = require('underscore');


var q_exec = q.denodeify(exec);


var bash_exec_init = function(working_dir) {
  
  //если повесить этот обработчик тогда ниже можно закоментить if ((''+stderr).indexOf('Broken pipe')===-1)
  process.on('SIGPIPE', function() { //head command support
    console.error('ICE bash_exec_init got SIGPIPE.');
  });

  return function(p_names, bash_command) {    
    return function(){      
      var p_values = Array.prototype.slice.call(arguments);
      var params = _.extend({}, process.env, _.object(p_names, p_values));
      return q_exec(bash_command, _.extend({cwd: working_dir, maxBuffer: 1024*1024*128}, {env:params}))
      .spread(function(stdout, stderr) {

        if(stderr) {
          if ((''+stderr).indexOf('Error: write EPIPE')===-1 && (''+stderr).indexOf('Broken pipe')===-1 && (''+stderr).indexOf('signal 13')===-1) { //nodejs вешает SIG_IGN на SIGPIPE 
            //console.trace();                             //A child process inherits the actions of the parent for the defaulted and ignored signals
            console.error('----------------===<<<ice-ice-ice>>>===--------------');
            console.error(stderr);                       //Отсюда процесс созданный exec наследует SIG_IGN отсюда Broken pipe патаму шта SIGPIPE не терминейтит подпроцесс

            console.error('------------------------------');
            console.error(bash_command);
            console.error('------------------------------');
            console.error(params);
            console.error('----------------===>>>ice-ice-ice<<<===--------------');
          }
        }
        
        return stdout;
      });
    };
  };
};

module.exports = bash_exec_init;
